from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from app.src.models.inventory import Inventory
from app.src.models.restock import Restock
from app.src.models.stock_history import StockHistory
from app.src import db, get_jakarta_time  # Add get_jakarta_time import
from sqlalchemy import or_

main = Blueprint('main', __name__)

@main.route('/')
@login_required
def index():
    from sqlalchemy import func
    from datetime import datetime, timedelta
    
    # Get total products and inventory value
    inventory_stats = db.session.query(
        func.count(Inventory.id).label('total_products'),
        func.sum(Inventory.quantity * Inventory.purchase_price).label('total_inventory_value')
    ).first()
    
    total_products = inventory_stats.total_products
    total_inventory_value = inventory_stats.total_inventory_value or 0
    
    # Get products with low stock (less than 5)
    low_stock = Inventory.query.filter(Inventory.quantity < 5).count()
    
    # Get distinct categories count
    categories = db.session.query(Inventory.category).distinct().count()
    
    # Get low stock items for alert
    low_stock_items = Inventory.query.filter(Inventory.quantity < 5).all()
    
    # Get pending restock count
    pending_restocks = Restock.query.filter_by(status='pending').count()
    
    # Calculate sales metrics
    today = get_jakarta_time().date()
    month_start = today.replace(day=1)
    
    # Daily sales
    daily_sales = db.session.query(
        func.sum(StockHistory.quantity * StockHistory.selling_price)
    ).filter(
        StockHistory.type == 'out',
        StockHistory.status == 'completed',
        func.date(StockHistory.date) == today
    ).scalar() or 0
    
    # Monthly sales
    monthly_sales = db.session.query(
        func.sum(StockHistory.quantity * StockHistory.selling_price)
    ).filter(
        StockHistory.type == 'out',
        StockHistory.status == 'completed',
        func.date(StockHistory.date) >= month_start
    ).scalar() or 0
    
    # Calculate profits
    daily_profit = db.session.query(
        func.sum((StockHistory.selling_price - StockHistory.purchase_price) * StockHistory.quantity)
    ).filter(
        StockHistory.type == 'out',
        StockHistory.status == 'completed',
        func.date(StockHistory.date) == today
    ).scalar() or 0
    
    monthly_profit = db.session.query(
        func.sum((StockHistory.selling_price - StockHistory.purchase_price) * StockHistory.quantity)
    ).filter(
        StockHistory.type == 'out',
        StockHistory.status == 'completed',
        func.date(StockHistory.date) >= month_start
    ).scalar() or 0    # Get products with low stock for warning display
    low_stock_items = Inventory.query.filter(Inventory.quantity < 5).all()
    
    # Get recent activities
    recent_activities = StockHistory.query.order_by(StockHistory.date.desc()).limit(5).all()
    
    return render_template('index.html',
                         total_products=total_products,
                         low_stock=low_stock,
                         categories=categories,
                         pending_restocks=pending_restocks,
                         low_stock_items=low_stock_items,
                         total_inventory_value=total_inventory_value,
                         daily_sales=daily_sales,
                         monthly_sales=monthly_sales,
                         daily_profit=daily_profit,
                         monthly_profit=monthly_profit,
                         recent_activities=recent_activities)
    
    # Get low stock items for the dashboard
    low_stock_items = Inventory.query.filter(Inventory.quantity < 5).all()
    
    # Get recent activities
    recent_activities = StockHistory.query.order_by(StockHistory.date.desc()).limit(5).all()
    
    return render_template('index.html', 
                         total_products=total_products,
                         low_stock=low_stock,
                         categories=categories,
                         pending_restocks=pending_restocks,
                         low_stock_items=low_stock_items,
                         recent_activities=recent_activities)

@main.route('/inventory')
@login_required
def inventory():
    # Get query parameters
    search = request.args.get('search', '')
    category = request.args.get('category', '')
    sort = request.args.get('sort', 'name')
    
    # Base query
    query = Inventory.query
    
    # Apply search filter
    if search:
        search_filter = or_(
            Inventory.product_name.ilike(f'%{search}%'),
            Inventory.description.ilike(f'%{search}%'),
            Inventory.category.ilike(f'%{search}%')
        )
        query = query.filter(search_filter)
    
    # Apply category filter
    if category:
        query = query.filter(Inventory.category == category)
    
    # Apply sorting
    if sort == 'name':
        query = query.order_by(Inventory.product_name)
    elif sort == 'quantity_asc':
        query = query.order_by(Inventory.quantity)
    elif sort == 'quantity_desc':
        query = query.order_by(Inventory.quantity.desc())
    elif sort == 'price_asc':
        query = query.order_by(Inventory.selling_price)
    elif sort == 'price_desc':
        query = query.order_by(Inventory.selling_price.desc())
    
    # Execute query
    items = query.all()
    
    # Get distinct categories for filter
    categories = db.session.query(Inventory.category).distinct().all()
    categories = [cat[0] for cat in categories if cat[0]]  # Remove None values
    
    return render_template('inventory/list.html',
                         items=items,
                         categories=categories,
                         search=search,
                         selected_category=category,
                         sort=sort)

@main.route('/inventory/add', methods=['GET', 'POST'])
@login_required
def add_inventory():
    if request.method == 'POST':
        try:
            # Validate that selling price is not less than purchase price
            purchase_price = request.form.get('purchase_price', type=float)
            selling_price = request.form.get('selling_price', type=float)
            
            if selling_price < purchase_price:
                flash('Error: Harga jual tidak boleh lebih rendah dari harga beli', 'danger')
                return redirect(url_for('main.add_inventory'))
            
            inventory = Inventory(
                product_name=request.form.get('product_name'),
                description=request.form.get('description'),
                quantity=request.form.get('quantity', type=int),
                purchase_price=purchase_price,
                selling_price=selling_price,
                category=request.form.get('category')
            )
            db.session.add(inventory)
            db.session.commit()
            flash('Produk berhasil ditambahkan', 'success')
            return redirect(url_for('main.inventory'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Terjadi kesalahan: {str(e)}', 'danger')
            return redirect(url_for('main.add_inventory'))
      # Get existing products for the dropdown
    existing_products = Inventory.query.order_by(Inventory.product_name).all()
    return render_template('inventory/form.html', existing_products=existing_products)

@main.route('/inventory/edit/<int:id>', methods=['GET', 'POST'])
@login_required
def edit_inventory(id):
    inventory = Inventory.query.get_or_404(id)    if request.method == 'POST':
        try:
            # Validate that selling price is not less than purchase price
            purchase_price = request.form.get('purchase_price', type=float)
            selling_price = request.form.get('selling_price', type=float)
            
            if selling_price < purchase_price:
                flash('Error: Harga jual tidak boleh lebih rendah dari harga beli', 'danger')
                return redirect(url_for('main.edit_inventory', id=id))
            
            inventory.product_name = request.form.get('product_name')
            inventory.description = request.form.get('description')
            inventory.quantity = request.form.get('quantity', type=int)
            inventory.purchase_price = purchase_price
            inventory.selling_price = selling_price
            inventory.category = request.form.get('category')
            
            db.session.commit()
            flash('Produk berhasil diperbarui', 'success')
            return redirect(url_for('main.inventory'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Terjadi kesalahan: {str(e)}', 'danger')
            return redirect(url_for('main.edit_inventory', id=id))
    
    return render_template('inventory/form.html', item=inventory)

@main.route('/inventory/<int:id>', methods=['DELETE'])
@login_required
def delete_inventory(id):
    try:
        inventory = Inventory.query.get_or_404(id)
        db.session.delete(inventory)
        db.session.commit()
        return jsonify({'message': 'Produk berhasil dihapus'}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@main.route('/inventory/<int:id>/stock-in', methods=['POST'])
@login_required
def stock_in(id):
    try:
        data = request.get_json()
        quantity = int(data.get('quantity', 0))
        
        if not quantity or quantity < 1:
            return jsonify({'error': 'Jumlah tidak valid'}), 400
            
        inventory = Inventory.query.get_or_404(id)
        
        # Record the stock before and calculate stock after
        stock_before = inventory.quantity
        stock_after = stock_before + quantity
        
        # Update inventory
        inventory.quantity = stock_after
        
        # Create stock history with correct stock values
        history = StockHistory(
            inventory_id=id,
            type='in',
            quantity=quantity,
            notes=data.get('notes'),
            reference=data.get('reference'),
            status='completed',
            purchase_price=inventory.purchase_price,
            selling_price=inventory.selling_price,
            stock_before=stock_before,
            stock_after=stock_after,
            user_id=current_user.id if current_user else None
        )
        
        db.session.add(history)
        db.session.commit()
        
        return jsonify({
            'message': 'Stok berhasil ditambah',
            'new_quantity': inventory.quantity
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400

@main.route('/inventory/<int:id>/stock-out', methods=['POST'])
@login_required
def stock_out(id):
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Invalid JSON data'}), 400
            
        quantity = int(data.get('quantity', 0))
        if not quantity or quantity < 1:
            return jsonify({'error': 'Jumlah tidak valid'}), 400
            
        inventory = Inventory.query.get_or_404(id)
        
        if inventory.quantity < quantity:
            return jsonify({'error': 'Stock tidak mencukupi'}), 400
        
        # Record the stock before and calculate stock after
        stock_before = inventory.quantity
        stock_after = stock_before - quantity
        
        # Update inventory
        inventory.quantity = stock_after
        
        # Create stock history
        history = StockHistory(
            inventory_id=id,
            type='out',
            quantity=quantity,
            notes=data.get('notes'),
            reference=data.get('reference'),
            status='completed',
            purchase_price=inventory.purchase_price,
            selling_price=inventory.selling_price,
            stock_before=stock_before,
            stock_after=stock_after,
            user_id=current_user.id if current_user else None
        )
        
        db.session.add(history)
        db.session.commit()
        
        return jsonify({
            'message': 'Stock berhasil dikurangi',
            'new_quantity': inventory.quantity
        }), 200
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 400
